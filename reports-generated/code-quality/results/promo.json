{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'taskGroup' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "field",
      "path": "plugins/documentation/readme-badges/main/kotlin/com/javiersc/gradle/plugins/readme/badges/generator/BuildReadmeBadgesTask.kt",
      "language": "kotlin",
      "line": 93,
      "offset": 18,
      "length": 9,
      "code": {
        "startLine": 91,
        "length": 9,
        "offset": 86,
        "surroundingCode": "    companion object {\n        const val name = \"buildReadmeBadges\"\n        const val taskGroup = \"documentation\"\n\n        fun register("
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.plugins.documentation.readme-badges.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "5451047252024662653"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Remove unnecessary parentheses from function call with lambda",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Remove unnecessary parentheses from function call with lambda",
  "detailsInfo": "Reports redundant empty parentheses of function calls where the only parameter is a lambda that's outside the parentheses.\n\nUse the 'Remove unnecessary parentheses from function call with lambda' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      fun foo() {\n          listOf(1).forEach() {  }\n      }\n\nAfter the quick-fix is applied:\n\n\n      fun foo() {\n          listOf(1).forEach {  }\n      }\n",
  "sources": [
    {
      "type": "method",
      "path": "plugins/code-enhancers-and-utils/code-analysis/main/kotlin/com/javiersc/gradle/plugins/code/analysis/CodeAnalysisPlugin.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 33,
      "length": 2,
      "code": {
        "startLine": 28,
        "length": 2,
        "offset": 40,
        "surroundingCode": "    }\n\n    target.tasks.withType<Detekt>() {\n        setSource(project.files(project.projectDir))\n        include(\"**/*.kt\")"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.plugins.code-enhancers-and-utils.code-analysis.main",
    "inspectionName": "RemoveEmptyParenthesesFromLambdaCall"
  },
  "hash": "753564623027433991"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Class \"DocsPlugin\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "class",
      "path": "plugins/documentation/docs/main/kotlin/com/javiersc/gradle/plugins/docs/DocsPlugin.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 15,
      "length": 10,
      "code": {
        "startLine": 19,
        "length": 10,
        "offset": 70,
        "surroundingCode": "import ru.vyarus.gradle.plugin.mkdocs.MkdocsExtension\n\nabstract class DocsPlugin : Plugin<Project> {\n\n    override fun apply(target: Project) {"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.plugins.documentation.docs.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "-7183916361393328660"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Class \"CodeCoveragePlugin\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "class",
      "path": "plugins/code-enhancers-and-utils/code-coverage/main/kotlin/com/javiersc/gradle/plugins/code/coverage/CodeCoveragePlugin.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 15,
      "length": 18,
      "code": {
        "startLine": 4,
        "length": 18,
        "offset": 46,
        "surroundingCode": "import org.gradle.api.Project\n\nabstract class CodeCoveragePlugin : Plugin<Project> {\n\n    override fun apply(target: Project) {"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.plugins.code-enhancers-and-utils.code-coverage.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "-8834842940699807044"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"javiersc-nexus\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "method",
      "path": "all-plugins/main/kotlin/NexusAccessors.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 27,
      "length": 16,
      "code": {
        "startLine": 4,
        "length": 16,
        "offset": 78,
        "surroundingCode": "import org.gradle.plugin.use.PluginDependencySpec\n\nval PluginDependenciesSpec.`javiersc-nexus`: PluginDependencySpec\n    get() = javiersc(\"nexus\")\n"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.all-plugins.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "-8667055439986226965"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Function \"javiersc-nexus\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "method",
      "path": "all-plugins/main/kotlin/NexusAccessors.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 27,
      "length": 16,
      "code": {
        "startLine": 7,
        "length": 16,
        "offset": 58,
        "surroundingCode": "    get() = javiersc(\"nexus\")\n\nfun PluginDependenciesSpec.`javiersc-nexus`(\n    version: String,\n): PluginDependencySpec = javiersc(\"nexus\", version)"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.all-plugins.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "-6926458526850435196"
}]}