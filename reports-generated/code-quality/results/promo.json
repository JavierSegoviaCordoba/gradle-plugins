{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Might be 'const'",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Might be 'const'",
  "detailsInfo": "Reports top-level `val` properties in objects that might be declared as `const` for better performance and Java interoperability.\n\n**Example:**\n\n\n      object A {\n          val foo = 1\n      }\n\nAfter the quick-fix is applied:\n\n\n      object A {\n          const val foo = 1\n      }\n",
  "sources": [
    {
      "type": "field",
      "path": "plugins/version-catalogs/massive-catalogs-updater/main/kotlin/com/javiersc/gradle/plugins/massive/catalogs/updater/MassiveCatalogsUpdaterPlugin.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 12,
      "length": 3,
      "code": {
        "startLine": 35,
        "length": 3,
        "offset": 15,
        "surroundingCode": "}\n\nprivate val url = \"https://repo1.maven.org/maven2/com/javiersc/massive-catalogs\"\n\nprivate val errorMessage = \"${Red}There was a problem fetching Massive Catalogs version$Reset\""
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.plugins.version-catalogs.massive-catalogs-updater.main",
    "inspectionName": "MayBeConstant"
  },
  "hash": "-7447890008819058324"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Remove unnecessary parentheses from function call with lambda",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Remove unnecessary parentheses from function call with lambda",
  "detailsInfo": "Reports redundant empty parentheses of function calls where the only parameter is a lambda that's outside the parentheses.\n\nUse the 'Remove unnecessary parentheses from function call with lambda' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      fun foo() {\n          listOf(1).forEach() {  }\n      }\n\nAfter the quick-fix is applied:\n\n\n      fun foo() {\n          listOf(1).forEach {  }\n      }\n",
  "sources": [
    {
      "type": "method",
      "path": "plugins/code-enhancers-and-utils/kotlin-config/main/kotlin/com/javiersc/gradle/plugins/kotlin/config/KotlinConfigType.kt",
      "language": "kotlin",
      "line": 66,
      "offset": 49,
      "length": 2,
      "code": {
        "startLine": 64,
        "length": 2,
        "offset": 105,
        "surroundingCode": "            project.configureJavaAndKotlinSourceSets()\n\n            project.tasks.withType<KotlinCompile>() {\n                kotlinOptions { jvmTarget = JavaVersion.VERSION_11.toString() }\n                sourceCompatibility = JavaVersion.VERSION_11.toString()"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.plugins.code-enhancers-and-utils.kotlin-config.main",
    "inspectionName": "RemoveEmptyParenthesesFromLambdaCall"
  },
  "hash": "3845329988822773624"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Remove unnecessary parentheses from function call with lambda",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Remove unnecessary parentheses from function call with lambda",
  "detailsInfo": "Reports redundant empty parentheses of function calls where the only parameter is a lambda that's outside the parentheses.\n\nUse the 'Remove unnecessary parentheses from function call with lambda' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      fun foo() {\n          listOf(1).forEach() {  }\n      }\n\nAfter the quick-fix is applied:\n\n\n      fun foo() {\n          listOf(1).forEach {  }\n      }\n",
  "sources": [
    {
      "type": "method",
      "path": "plugins/code-enhancers-and-utils/dependency-updates/main/kotlin/com/javiersc/gradle/plugins/dependency/updates/DependencyUpdatesPlugin.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 52,
      "length": 2,
      "code": {
        "startLine": 11,
        "length": 2,
        "offset": 121,
        "surroundingCode": "        target.pluginManager.apply(\"com.github.ben-manes.versions\")\n\n        target.tasks.withType<DependencyUpdatesTask>() {\n            rejectVersionIf { !target.project.isStable(it.candidate.version) }\n        }"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.plugins.code-enhancers-and-utils.dependency-updates.main",
    "inspectionName": "RemoveEmptyParenthesesFromLambdaCall"
  },
  "hash": "-2285785234146031110"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Class \"VersioningPlugin\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "class",
      "path": "plugins/code-enhancers-and-utils/versioning/main/kotlin/com/javiersc/gradle/plugins/versioning/VersioningPlugin.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 15,
      "length": 16,
      "code": {
        "startLine": 4,
        "length": 16,
        "offset": 46,
        "surroundingCode": "import org.gradle.api.Project\n\nabstract class VersioningPlugin : Plugin<Project> {\n\n    override fun apply(target: Project) {"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.plugins.code-enhancers-and-utils.versioning.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "-5378136437586799971"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Class \"KotlinConfigPlugin\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "class",
      "path": "plugins/code-enhancers-and-utils/kotlin-config/main/kotlin/com/javiersc/gradle/plugins/kotlin/config/KotlinConfigPlugin.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 6,
      "length": 18,
      "code": {
        "startLine": 4,
        "length": 18,
        "offset": 37,
        "surroundingCode": "import org.gradle.api.Project\n\nclass KotlinConfigPlugin : Plugin<Project> {\n\n    override fun apply(project: Project) {"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.plugins.code-enhancers-and-utils.kotlin-config.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1540212358853930689"
}]}