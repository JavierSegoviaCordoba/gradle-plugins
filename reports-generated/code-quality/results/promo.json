{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Property 'taskGroup' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "field",
      "path": "plugins/documentation/readme-badges/main/kotlin/com/javiersc/gradle/plugins/readme/badges/generator/BuildReadmeBadgesTask.kt",
      "language": "kotlin",
      "line": 93,
      "offset": 18,
      "length": 9,
      "code": {
        "startLine": 91,
        "length": 9,
        "offset": 86,
        "surroundingCode": "    companion object {\n        const val name = \"buildReadmeBadges\"\n        const val taskGroup = \"documentation\"\n\n        fun register("
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.plugins.documentation.readme-badges.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "5451047252024662653"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Remove unnecessary parentheses from function call with lambda",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Remove unnecessary parentheses from function call with lambda",
  "detailsInfo": "Reports redundant empty parentheses of function calls where the only parameter is a lambda that's outside the parentheses.\n\nUse the 'Remove unnecessary parentheses from function call with lambda' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      fun foo() {\n          listOf(1).forEach() {  }\n      }\n\nAfter the quick-fix is applied:\n\n\n      fun foo() {\n          listOf(1).forEach {  }\n      }\n",
  "sources": [
    {
      "type": "method",
      "path": "plugins/code-enhancers-and-utils/kotlin-config/main/kotlin/com/javiersc/gradle/plugins/kotlin/config/KotlinConfigType.kt",
      "language": "kotlin",
      "line": 66,
      "offset": 49,
      "length": 2,
      "code": {
        "startLine": 64,
        "length": 2,
        "offset": 105,
        "surroundingCode": "            project.configureJavaAndKotlinSourceSets()\n\n            project.tasks.withType<KotlinCompile>() {\n                kotlinOptions { jvmTarget = JavaVersion.VERSION_11.toString() }\n                sourceCompatibility = JavaVersion.VERSION_11.toString()"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.plugins.code-enhancers-and-utils.kotlin-config.main",
    "inspectionName": "RemoveEmptyParenthesesFromLambdaCall"
  },
  "hash": "3845329988822773624"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Remove unnecessary parentheses from function call with lambda",
  "tags": [
    "kotlin"
  ],
  "severity": "Info",
  "comment": "Remove unnecessary parentheses from function call with lambda",
  "detailsInfo": "Reports redundant empty parentheses of function calls where the only parameter is a lambda that's outside the parentheses.\n\nUse the 'Remove unnecessary parentheses from function call with lambda' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      fun foo() {\n          listOf(1).forEach() {  }\n      }\n\nAfter the quick-fix is applied:\n\n\n      fun foo() {\n          listOf(1).forEach {  }\n      }\n",
  "sources": [
    {
      "type": "method",
      "path": "plugins/code-enhancers-and-utils/dependency-updates/main/kotlin/com/javiersc/gradle/plugins/dependency/updates/DependencyUpdatesPlugin.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 52,
      "length": 2,
      "code": {
        "startLine": 11,
        "length": 2,
        "offset": 121,
        "surroundingCode": "        target.pluginManager.apply(\"com.github.ben-manes.versions\")\n\n        target.tasks.withType<DependencyUpdatesTask>() {\n            rejectVersionIf { !target.project.isStable(it.candidate.version) }\n        }"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.plugins.code-enhancers-and-utils.dependency-updates.main",
    "inspectionName": "RemoveEmptyParenthesesFromLambdaCall"
  },
  "hash": "-2285785234146031110"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Class \"NexusPlugin\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "class",
      "path": "plugins/publish/nexus/main/kotlin/com/javiersc/gradle/plugins/nexus/NexusPlugin.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 15,
      "length": 11,
      "code": {
        "startLine": 6,
        "length": 11,
        "offset": 46,
        "surroundingCode": "import org.gradle.api.Project\n\nabstract class NexusPlugin : Plugin<Project> {\n\n    override fun apply(target: Project) {"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.plugins.publish.nexus.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8626116194662664448"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Class \"PublishPlugin\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "class",
      "path": "plugins/publish/publish/main/kotlin/com/javiersc/gradle/plugins/publish/PublishPlugin.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 15,
      "length": 13,
      "code": {
        "startLine": 6,
        "length": 13,
        "offset": 46,
        "surroundingCode": "import org.gradle.api.Project\n\nabstract class PublishPlugin : Plugin<Project> {\n\n    override fun apply(target: Project) {"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.plugins.publish.publish.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1387341961954080359"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Class \"MassiveCatalogsUpdaterPlugin\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "class",
      "path": "plugins/version-catalogs/massive-catalogs-updater/main/kotlin/com/javiersc/gradle/plugins/massive/catalogs/updater/MassiveCatalogsUpdaterPlugin.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 15,
      "length": 28,
      "code": {
        "startLine": 14,
        "length": 28,
        "offset": 49,
        "surroundingCode": "import org.jsoup.select.Elements\n\nabstract class MassiveCatalogsUpdaterPlugin : Plugin<Project> {\n\n    override fun apply(target: Project) {"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.plugins.version-catalogs.massive-catalogs-updater.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5313548048203858934"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Class \"VersioningPlugin\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "class",
      "path": "plugins/code-enhancers-and-utils/versioning/main/kotlin/com/javiersc/gradle/plugins/versioning/VersioningPlugin.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 15,
      "length": 16,
      "code": {
        "startLine": 4,
        "length": 16,
        "offset": 46,
        "surroundingCode": "import org.gradle.api.Project\n\nabstract class VersioningPlugin : Plugin<Project> {\n\n    override fun apply(target: Project) {"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.plugins.code-enhancers-and-utils.versioning.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "-5378136437586799971"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Function \"javiersc-dependency-updates\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "method",
      "path": "all-plugins/main/kotlin/DependencyUpdatesAccessors.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 27,
      "length": 29,
      "code": {
        "startLine": 7,
        "length": 29,
        "offset": 71,
        "surroundingCode": "    get() = javiersc(\"dependency.updates\")\n\nfun PluginDependenciesSpec.`javiersc-dependency-updates`(\n    version: String,\n): PluginDependencySpec = javiersc(\"dependency.updates\", version)"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.all-plugins.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "-5323804202195859099"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"javiersc-dependency-updates\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "method",
      "path": "all-plugins/main/kotlin/DependencyUpdatesAccessors.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 27,
      "length": 29,
      "code": {
        "startLine": 4,
        "length": 29,
        "offset": 78,
        "surroundingCode": "import org.gradle.plugin.use.PluginDependencySpec\n\nval PluginDependenciesSpec.`javiersc-dependency-updates`: PluginDependencySpec\n    get() = javiersc(\"dependency.updates\")\n"
      }
    }
  ],
  "attributes": {
    "module": "gradle-plugins.all-plugins.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4333864265746367779"
}]}